import pandas as pd
import numpy as np
import statsmodels.api as sm
import matplotlib.pyplot as plt
import seaborn as sns

# Load data
sales_data = pd.read_csv('sales_data.csv')  
inventory_data = pd.read_csv('inventory_data.csv')  
customer_data = pd.read_csv('customer_data.csv')  

# Preprocessing
sales_data['Date'] = pd.to_datetime(sales_data['Date'])
sales_data = sales_data.set_index('Date')

# Sales and Revenue Analysis
monthly_sales = sales_data.resample('M').sum()

plt.figure(figsize=(12, 6))
plt.plot(monthly_sales['Revenue'], marker='o', linestyle='-')
plt.title('Monthly Revenue')
plt.xlabel('Date')
plt.ylabel('Revenue')
plt.grid(True)
plt.show()

# Inventory Management
inventory_data['Inventory Turnover'] = inventory_data['Cost of Goods Sold'] / inventory_data['Average Inventory']
plt.figure(figsize=(12, 6))
sns.barplot(x='Product Category', y='Inventory Turnover', data=inventory_data)
plt.title('Inventory Turnover by Product Category')
plt.show()

# Customer Demographics
customer_segments = customer_data.groupby('Segment').agg({
    'Revenue': 'sum',
    'Number of Orders': 'sum'
}).reset_index()

plt.figure(figsize=(12, 6))
sns.barplot(x='Segment', y='Revenue', data=customer_segments)
plt.title('Revenue by Customer Segment')
plt.show()

# Forecasting Future Trends
# Time Series Forecasting
y = monthly_sales['Revenue']
y_train = y[:-12]
y_test = y[-12:]

# Fit the model
model = sm.tsa.statespace.SARIMAX(y_train, order=(1, 1, 1), seasonal_order=(1, 1, 1, 12))
results = model.fit()

# Forecast
forecast = results.get_forecast(steps=12)
forecast_ci = forecast.conf_int()

plt.figure(figsize=(12, 6))
plt.plot(y, label='Observed')
plt.plot(forecast.predicted_mean, label='Forecast', color='r')
plt.fill_between(forecast_ci.index, forecast_ci.iloc[:, 0], forecast_ci.iloc[:, 1], color='r', alpha=0.3)
plt.title('Revenue Forecast')
plt.xlabel('Date')
plt.ylabel('Revenue')
plt.legend()
plt.grid(True)
plt.show()

# Print summary
print(results.summary())
